# .github/workflows/firebase-deploy.yml
name: Firebase Auto-Deploy (pnpm)

# 触发条件：当代码推送到 main 分支（可根据需求修改分支名，如 dev/test）
on:
  push:
    branches:
      - main  # 监听的分支，建议生产环境用 main，测试环境用 dev

jobs:
  build-and-deploy:
    # 运行环境：最新版 Ubuntu（兼容性好，速度快）
    runs-on: ubuntu-latest

    steps:
      ########################################################################
      # 第一步：拉取 GitHub 仓库代码
      ########################################################################
      - name: Checkout repository code
        uses: actions/checkout@v4  # 官方动作，拉取当前分支代码

      ########################################################################
      # 第二步：配置 Node.js 环境（pnpm 依赖 Node.js）
      ########################################################################
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20  # 选择与本地开发一致的 Node 版本（建议 18+）
          cache: 'pnpm'     # 缓存 pnpm 依赖，加速后续构建（关键优化）

      ########################################################################
      # 第三步：安装 pnpm 包管理器（Ubuntu 默认没有 pnpm，需手动安装）
      ########################################################################
      - name: Install pnpm
        uses: pnpm/action-setup@v3  # pnpm 官方动作，确保版本一致
        with:
          version: 8  # 选择稳定的 pnpm 版本（与本地使用的版本匹配）

      ########################################################################
      # 第四步：安装项目依赖（基于 package.json）
      ########################################################################
      - name: Install project dependencies
        run: pnpm install  # 替代 npm install，使用 pnpm 安装依赖

      ########################################################################
      # 第五步：执行项目构建（pnpm run build）
      ########################################################################
      - name: Build project (pnpm run build)
        run: pnpm run build  # 执行你的构建命令，生成生产环境文件
       

      ########################################################################
      # 第六步： Firebase 身份验证（通过服务账户密钥，安全无交互）
      ########################################################################
      - name: Authenticate with Firebase
        uses: FirebaseExtended/action-firebase-login@v3  # Firebase 官方登录动作
        with:
          # 引用 GitHub Secrets 中存储的 Firebase 服务账户密钥
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
          # （重要）替换为你的 Firebase 项目 ID（在 Firebase 控制台 → 项目设置 中查看）
          projectId: xy-level-calc

      ########################################################################
      # 第七步：部署构建后的文件到 Firebase Hosting
      ########################################################################
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0  # Firebase 官方部署动作
        with:
          # （关键）指定构建后的输出目录（根据你的项目实际目录修改！）
          # 常见框架目录：Vue/Vite 是 dist，React 是 build，需与本地构建结果一致
          folder: dist  # 🔔 请确认你的构建输出目录，若为 build 则改为 folder: build
          # 部署目标（默认部署到 "live" 环境，即生产环境）
          channelId: live
          # 自动清理旧版本（可选，保持存储整洁）
          cleanup: true
        env:
          # 自动使用上一步的登录身份，无需额外配置
          FIREBASE_CLI_PREVIEWS: hostingchannels  # 启用 Hosting 渠道功能